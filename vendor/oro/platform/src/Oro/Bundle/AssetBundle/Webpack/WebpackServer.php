<?php

namespace Oro\Bundle\AssetBundle\Webpack;

use Guzzle\Http\Client;

/**
 * Accessor for webpack-dev-server status and options
 */
class WebpackServer
{
    /**
     * @var Client|null
     */
    private $client;

    /**
     * @var bool
     */
    private $isRunning;

    /**
     * @var array
     */
    private $webpackDevServerOptions;

    /**
     * @param array $webpackDevServerOptions
     */
    public function __construct(array $webpackDevServerOptions)
    {
        $this->webpackDevServerOptions = $webpackDevServerOptions;
    }

    /**
     * @return bool
     */
    public function isRunning(): bool
    {
        if (!$this->isEnabled()) {
            return false;
        }

        if (null === $this->isRunning) {
            $url = $this->getServerUrl();
            try {
                $response = $this->getClient()
                    ->head(
                        $url,
                        [],
                        // Skip SSL verification to allow using self signed
                        // certificate autogenerated by webpack-dev-server
                        ['verify' => false]
                    )
                    ->send();

                $this->isRunning = $response->getStatusCode() === 200 &&
                    $response->hasHeader('x-powered-by') &&
                    $response->getHeader('x-powered-by')->hasValue('Express');
            } catch (\Exception $exception) {
                return false;
            }
        }

        return $this->isRunning;
    }

    /**
     * @param string $url
     * @return string
     */
    public function getServerUrl(string $url = ''): string
    {
        $url = str_replace('.css', '.bundle.js', $url);
        $url = ltrim($url, '/');

        $http = $this->webpackDevServerOptions['https'] ? 'https' : 'http';
        $devServerHost = $this->webpackDevServerOptions['host'];
        $devServerPort = $this->webpackDevServerOptions['port'];

        return sprintf('%s://%s:%s/%s', $http, $devServerHost, $devServerPort, $url);
    }

    /**
     * @return Client
     */
    private function getClient(): Client
    {
        if (!$this->client) {
            $this->client = new Client('', ['connect_timeout' => 0.5]);
        }

        return $this->client;
    }

    /**
     * @return bool
     */
    private function isEnabled(): bool
    {
        return $this->webpackDevServerOptions['enable_hmr'];
    }
}
